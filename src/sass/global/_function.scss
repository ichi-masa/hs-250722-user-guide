@use 'sass:math';
@use 'sass:meta';
@use 'size' as *;
@use 'typography' as *;

// 数値のみを取り出す
// 参照：https://css-tricks.com/snippets/sass/strip-unit-function/
@function strip-unit($number) {
  @if meta.type-of($number)=='number' and not math.is-unitless($number) {
    // @return $number / ($number * 0 + 1);
    @return math.div($number, $number * 0 + 1);
  }

  @return $number;
}

@function percent($size, $base-size: $layout-width-container) {
  @return math.div(strip-unit($size), strip-unit($base-size)) * 100%;
}

@function vw($size, $window_width: $layout-width-canvas) {
  // @return $size / $window_width * 100vw;
  @return math.div(strip-unit($size), strip-unit($window_width)) * 100vw;
}

// remへの計算式（16pxを基準としている。10pxを基準とする場合は16を10に変更する）
@function rem($pixels, $font-size: $fz-root) {
  // @return $pixels / 16 * 1rem;
  @return math.div(strip-unit($pixels), strip-unit($font-size)) * 1rem;
}

// ブロックのフォントサイズ基準にエレメントのサイズを作成する
@function em($pixels, $block-font-size: $fz-root) {
  @return math.div(strip-unit($pixels), strip-unit($block-font-size)) * 1em;
}

// letter-spacing計算
@function lsp($letter_spacing, $font_size) {
  // @return $letter_spacing / $font_size * 1em;
  @return math.div(strip-unit($letter_spacing), strip-unit($font_size)) * 1em;
}

// line-height を計算
@function lh($line_height, $font_size) {
  @return math.div(strip-unit($line_height), strip-unit($font_size));
}
